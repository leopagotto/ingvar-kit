const fs = require('fs-extra');
const path = require('path');
const chalk = require('chalk');
const inquirer = require('inquirer');
const { execSync } = require('child_process');
const { generateSparkApp } = require('../ai/code-generator');

/**
 * Ingvar Spark - Rapid App Generator
 *
 * Creates complete React apps from a single prompt using:
 * - GitHub Spark template (React + TypeScript + Vite)
 * - shadcn/ui components (40+ pre-built components)
 * - Ingvar AI code generation
 * - Modern tooling (Tailwind CSS v4, Framer Motion, etc.)
 */
class SparkGenerator {

  async create(options) {
    console.log(chalk.cyan('üöÄ Ingvar Spark - Rapid App Generator\n'));

    try {
      // Get user input
      const config = await this.getAppRequirements(options);

      // Generate app
      await this.generateApp(config);

    } catch (error) {
      console.error(chalk.red('‚ùå Error creating Spark app:'), error.message);
      if (process.env.DEBUG) console.error(error);
      process.exit(1);
    }
  }

  async getAppRequirements(options) {
    const questions = [];

    if (!options.prompt) {
      questions.push({
        type: 'input',
        name: 'prompt',
        message: 'üéØ Describe the app you want to build:',
        validate: input => input.length > 10 || 'Please provide a more detailed description (at least 10 characters)'
      });
    }

    if (!options.name) {
      questions.push({
        type: 'input',
        name: 'name',
        message: 'üìõ App name:',
        default: (answers) => this.generateAppName(answers.prompt || options.prompt),
        validate: input => /^[a-zA-Z0-9-_]+$/.test(input) || 'Name must contain only letters, numbers, hyphens, and underscores'
      });
    }

    const answers = await inquirer.prompt(questions);

    return {
      prompt: options.prompt || answers.prompt,
      name: options.name || answers.name,
      directory: options.dir,
      install: options.install !== false,
      start: options.start !== false
    };
  }

  generateAppName(prompt) {
    // Extract key words and create a name
    const words = prompt.toLowerCase()
      .replace(/[^a-zA-Z0-9\s]/g, '')
      .split(/\s+/)
      .filter(word => word.length > 2)
      .slice(0, 3);

    return words.join('-') || 'spark-app';
  }

  async generateApp(config) {
    const { prompt, name, directory, install, start } = config;

    console.log(chalk.blue('üîß Setting up Spark app...\n'));

    // 1. Copy template
    const templatePath = path.join(__dirname, '../../template-main');
    const appPath = path.join(process.cwd(), directory, name);

    console.log(`üìÅ Creating app directory: ${chalk.cyan(appPath)}`);
    await fs.ensureDir(appPath);
    await fs.copy(templatePath, appPath);

    // 2. Update package.json
    console.log('üì¶ Updating package.json...');
    const packageJsonPath = path.join(appPath, 'package.json');
    const packageJson = await fs.readJson(packageJsonPath);
    packageJson.name = name;
    packageJson.description = `Generated by Ingvar Spark: ${prompt}`;
    await fs.writeJson(packageJsonPath, packageJson, { spaces: 2 });

    // 3. Generate AI code
    console.log(chalk.yellow('ü§ñ Generating app code with AI...\n'));

    try {
      const appCode = await generateSparkApp(prompt, name);
      await this.writeGeneratedFiles(appPath, appCode);
    } catch (error) {
      console.log(chalk.yellow('‚ö†Ô∏è  AI generation failed, using basic template'));
      await this.createBasicApp(appPath, prompt, name);
    }

    // 4. Install dependencies
    if (install) {
      console.log(chalk.blue('üì• Installing dependencies...\n'));
      try {
        execSync('npm install', { cwd: appPath, stdio: 'inherit' });
      } catch (error) {
        console.log(chalk.yellow('‚ö†Ô∏è  Manual install required: cd ' + appPath + ' && npm install'));
      }
    }

    // 5. Success message
    console.log(chalk.green('\nüéâ Spark app created successfully!\n'));

    console.log(chalk.cyan('üìç Location:'), appPath);
    console.log(chalk.cyan('üöÄ Next steps:'));
    console.log(`  cd ${path.relative(process.cwd(), appPath)}`);
    if (!install) console.log('  npm install');
    console.log('  npm run dev');

    // 6. Start dev server
    if (start && install) {
      console.log(chalk.blue('\nüåü Starting development server...\n'));
      try {
        execSync('npm run dev', { cwd: appPath, stdio: 'inherit' });
      } catch (error) {
        console.log(chalk.yellow('‚ö†Ô∏è  Start manually: cd ' + appPath + ' && npm run dev'));
      }
    }
  }

  async writeGeneratedFiles(appPath, aiResponse) {
    // Parse the AI response to extract different files
    const files = this.parseAIResponse(aiResponse);

    for (const [filePath, content] of Object.entries(files)) {
      const fullPath = path.join(appPath, 'src', filePath);
      await fs.ensureDir(path.dirname(fullPath));
      await fs.writeFile(fullPath, content, 'utf8');
      console.log(chalk.green('‚úÖ'), `Generated ${filePath}`);
    }
  }

  parseAIResponse(response) {
    const files = {};

    // Look for file markers like // src/App.tsx
    const filePattern = /```(?:tsx?|typescript|jsx?)?\s*(?:\/\/)?\s*((?:src\/)?[\w\/.-]+\.(?:tsx?|jsx?|ts|js))\s*\n([\s\S]*?)```/g;
    let match;

    while ((match = filePattern.exec(response)) !== null) {
      let filePath = match[1];
      const content = match[2].trim();

      // Remove src/ prefix if present since we'll add it
      filePath = filePath.replace(/^src\//, '');

      files[filePath] = content;
    }

    // If no files found, treat entire response as App.tsx
    if (Object.keys(files).length === 0) {
      files['App.tsx'] = response.replace(/```[^`]*```/g, '').trim();
    }

    return files;
  }

  async createBasicApp(appPath, prompt, appName) {
    const basicApp = `import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';

function App() {
  return (
    <div className="min-h-screen bg-background p-8">
      <div className="max-w-4xl mx-auto space-y-8">
        <header className="text-center space-y-4">
          <h1 className="text-4xl font-bold tracking-tight">
            ${appName}
          </h1>
          <p className="text-xl text-muted-foreground">
            ${prompt}
          </p>
          <Badge variant="secondary">Generated by Ingvar Spark</Badge>
        </header>

        <Card>
          <CardHeader>
            <CardTitle>üöÄ Your App is Ready!</CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <p>This is your generated Spark app. Start building amazing things!</p>
            <Button>Get Started</Button>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}

export default App;`;

    const appFile = path.join(appPath, 'src', 'App.tsx');
    await fs.writeFile(appFile, basicApp, 'utf8');
    console.log(chalk.green('‚úÖ'), 'Generated basic App.tsx');
  }
}

module.exports = SparkGenerator;
