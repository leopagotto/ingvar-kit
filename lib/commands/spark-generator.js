const fs = require('fs-extra');
const path = require('path');
const chalk = require('chalk');
const inquirer = require('inquirer');
const { execSync } = require('child_process');
const { generateWithAI } = require('../ai/code-generator');
const {
  generateIkeaTailwindConfig,
  generateIkeaComponentCSS,
  IKEA_DESIGN_TOKENS
} = require('../ai/ikea-design-system');

/**
 * Ingvar Spark - Rapid App Generator
 *
 * Creates complete React apps from a single prompt using:
 * - GitHub Spark template (React + TypeScript + Vite)
 * - shadcn/ui components (40+ pre-built components)
 * - Ingvar AI code generation
 * - Modern tooling (Tailwind CSS v4, Framer Motion, etc.)
 */
class SparkGenerator {

  async create(options) {
    console.log(chalk.cyan('üöÄ Ingvar Spark - Rapid App Generator\n'));

    try {
      // Get user input
      const config = await this.getAppRequirements(options);

      // Generate app
      await this.generateApp(config);

    } catch (error) {
      console.error(chalk.red('‚ùå Error creating Spark app:'), error.message);
      if (process.env.DEBUG) console.error(error);
      process.exit(1);
    }
  }

  async getAppRequirements(options) {
    const questions = [];

    if (!options.prompt) {
      questions.push({
        type: 'input',
        name: 'prompt',
        message: 'üéØ Describe the app you want to build:',
        validate: input => input.length > 10 || 'Please provide a more detailed description (at least 10 characters)'
      });
    }

    if (!options.name) {
      questions.push({
        type: 'input',
        name: 'name',
        message: 'üìõ App name:',
        default: (answers) => this.generateAppName(answers.prompt || options.prompt),
        validate: input => /^[a-zA-Z0-9-_]+$/.test(input) || 'Name must contain only letters, numbers, hyphens, and underscores'
      });
    }

    // Ask about design system if not specified
    if (!options.style) {
      questions.push({
        type: 'confirm',
        name: 'useIkea',
        message: 'üá∏üá™ Use IKEA design system? (Swedish minimalist aesthetic with blue/yellow colors)',
        default: true
      });
    }

    const answers = await inquirer.prompt(questions);

    // Detect design system from style option or prompt content
    const styleOption = options.style?.toLowerCase();
    const promptLower = (options.prompt || answers.prompt || '').toLowerCase();

    // Check if user explicitly wants Ingka or if mentioned in prompt
    const useIngka = styleOption === 'ingka' ||
                     promptLower.includes('ingka') ||
                     promptLower.includes('skapa') ||
                     (styleOption === 'ikea' && promptLower.includes('official'));

    // Custom IKEA design (deprecated, but kept for backward compatibility)
    const useIkea = !useIngka && (styleOption === 'ikea' || answers.useIkea);

    return {
      prompt: options.prompt || answers.prompt,
      name: options.name || answers.name,
      directory: options.dir,
      useIkea,
      useIngka,
      designSystem: useIngka ? 'ingka' : (useIkea ? 'ikea' : 'default'),
      install: options.install !== false,
      start: options.start !== false
    };
  }

  generateAppName(prompt) {
    // Extract key words and create a name
    const words = prompt.toLowerCase()
      .replace(/[^a-zA-Z0-9\s]/g, '')
      .split(/\s+/)
      .filter(word => word.length > 2)
      .slice(0, 3);

    return words.join('-') || 'spark-app';
  }

  async generateApp(config) {
    const { prompt, name, directory, useIkea, useIngka, designSystem, install, start } = config;

    console.log(chalk.blue('üîß Setting up Spark app...\n'));

    if (useIngka) {
      console.log(chalk.cyan.bold('üá∏üá™ Using Official IKEA Ingka Skapa Design System'));
      console.log(chalk.gray('   Production-ready components from IKEA\n'));
    } else if (useIkea) {
      console.log(chalk.yellow('üá∏üá™ Using custom IKEA design system'));
      console.log(chalk.gray('   üí° Tip: Use --style ingka for official components\n'));
    }

    // 1. Copy template
    const templatePath = path.join(__dirname, '../../template-main');
    const appPath = path.join(process.cwd(), directory, name);

    console.log(`üìÅ Creating app directory: ${chalk.cyan(appPath)}`);
    await fs.ensureDir(appPath);
    await fs.copy(templatePath, appPath);

    // 2. Update package.json
    console.log('üì¶ Updating package.json...');
    const packageJsonPath = path.join(appPath, 'package.json');
    const packageJson = await fs.readJson(packageJsonPath);
    packageJson.name = name;
    packageJson.description = `Generated by Ingvar Spark: ${prompt}`;
    if (useIngka) {
      packageJson.description += ' (IKEA Ingka Skapa Design System)';
    } else if (useIkea) {
      packageJson.description += ' (Custom IKEA Design)';
    }
    await fs.writeJson(packageJsonPath, packageJson, { spaces: 2 });

    // 3. Apply design system
    if (useIngka) {
      await this.applyIngkaDesignSystem(appPath);
    } else if (useIkea) {
      await this.applyIkeaDesignSystem(appPath);
    }

    // 4. Generate AI code
    console.log(chalk.yellow('ü§ñ Generating app code with AI...\n'));

    try {
      const appCode = await this.generateAppCode(prompt, name, useIkea);
      await this.writeGeneratedFiles(appPath, appCode);
    } catch (error) {
      console.log(chalk.yellow('‚ö†Ô∏è  AI generation failed, using fallback template'));
      await this.createBasicApp(appPath, prompt, name, useIkea);
    }

    // 5. Install dependencies
    if (install) {
      console.log(chalk.blue('üì• Installing dependencies...\n'));
      try {
        execSync('npm install', { cwd: appPath, stdio: 'inherit' });
      } catch (error) {
        console.log(chalk.yellow('‚ö†Ô∏è  Manual install required: cd ' + appPath + ' && npm install'));
      }
    }

    // 6. Success message
    console.log(chalk.green('\nüéâ Spark app created successfully!\n'));

    console.log(chalk.cyan('üìç Location:'), appPath);
    if (useIkea) {
      console.log(chalk.yellow('üá∏üá™ Design System:'), 'IKEA (Swedish minimalist)');
      console.log(chalk.blue('üé® Colors:'), 'Swedish Blue (#0046be) & Yellow (#fdc935)');
    }
    console.log(chalk.cyan('üöÄ Next steps:'));
    console.log(`  cd ${path.relative(process.cwd(), appPath)}`);
    if (!install) console.log('  npm install');
    console.log('  npm run dev');

    // 7. Start dev server
    if (start && install) {
      console.log(chalk.blue('\nüåü Starting development server...\n'));
      try {
        execSync('npm run dev', { cwd: appPath, stdio: 'inherit' });
      } catch (error) {
        console.log(chalk.yellow('‚ö†Ô∏è  Start manually: cd ' + appPath + ' && npm run dev'));
      }
    }
  }

  async writeGeneratedFiles(appPath, aiResponse) {
    // Parse the AI response to extract different files
    const files = this.parseAIResponse(aiResponse);

    for (const [filePath, content] of Object.entries(files)) {
      const fullPath = path.join(appPath, 'src', filePath);
      await fs.ensureDir(path.dirname(fullPath));
      await fs.writeFile(fullPath, content, 'utf8');
      console.log(chalk.green('‚úÖ'), `Generated ${filePath}`);
    }
  }

  parseAIResponse(response) {
    const files = {};

    // Look for file markers like // src/App.tsx
    const filePattern = /```(?:tsx?|typescript|jsx?)?\s*(?:\/\/)?\s*((?:src\/)?[\w\/.-]+\.(?:tsx?|jsx?|ts|js))\s*\n([\s\S]*?)```/g;
    let match;

    while ((match = filePattern.exec(response)) !== null) {
      let filePath = match[1];
      const content = match[2].trim();

      // Remove src/ prefix if present since we'll add it
      filePath = filePath.replace(/^src\//, '');

      files[filePath] = content;
    }

    // If no files found, treat entire response as App.tsx
    if (Object.keys(files).length === 0) {
      files['App.tsx'] = response.replace(/```[^`]*```/g, '').trim();
    }

    return files;
  }

  async createBasicApp(appPath, prompt, appName) {
    const basicApp = `import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';

function App() {
  return (
    <div className="min-h-screen bg-background p-8">
      <div className="max-w-4xl mx-auto space-y-8">
        <header className="text-center space-y-4">
          <h1 className="text-4xl font-bold tracking-tight">
            ${appName}
          </h1>
          <p className="text-xl text-muted-foreground">
            ${prompt}
          </p>
          <Badge variant="secondary">Generated by Ingvar Spark</Badge>
        </header>

        <Card>
          <CardHeader>
            <CardTitle>üöÄ Your App is Ready!</CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <p>This is your generated Spark app. Start building amazing things!</p>
            <Button>Get Started</Button>
          </CardContent>
        </Card>
      </div>
    </div>
  );
}

export default App;`;

    const appFile = path.join(appPath, 'src', 'App.tsx');
    await fs.writeFile(appFile, basicApp, 'utf8');
    console.log(chalk.green('‚úÖ'), 'Generated basic App.tsx');
  }

  /**
   * Generate app code (fallback for now)
   */
  async generateAppCode(prompt, appName, useIkea = false) {
    console.log(chalk.yellow('ü§ñ Using fallback template with IKEA design...'));
    return this.generateFallbackApp(prompt, appName, useIkea);
  }

  /**
   * Generate fallback app with IKEA styling
   */
  generateFallbackApp(prompt, appName, useIkea = false) {
    const ikeaClasses = useIkea ? {
      background: 'bg-white',
      primary: 'bg-[#0046be]',
      accent: 'bg-[#fdc935]',
      text: 'text-[#0046be]',
      card: 'bg-white border-gray-200 shadow-sm rounded-lg',
      button: 'bg-[#0046be] hover:bg-[#003399] text-white rounded-lg px-6 py-3 font-medium transition-colors'
    } : {
      background: 'bg-background',
      primary: 'bg-primary',
      accent: 'bg-accent',
      text: 'text-foreground',
      card: '',
      button: ''
    };

    return {
      'App.tsx': `import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';

function App() {
  return (
    <div className="min-h-screen ${ikeaClasses.background} p-8">
      <div className="max-w-4xl mx-auto space-y-8">
        <header className="text-center space-y-4">
          <h1 className="text-4xl font-bold tracking-tight ${ikeaClasses.text}">
            ${appName}
          </h1>
          <p className="text-xl text-gray-600">
            ${prompt}
          </p>
          <div className="flex justify-center gap-2">
            <Badge variant="secondary">Generated by Ingvar Spark</Badge>
            ${useIkea ? '<Badge className="bg-[#fdc935] text-[#0046be] hover:bg-[#e6b82f]">IKEA Design</Badge>' : ''}
          </div>
        </header>

        <Card className="${ikeaClasses.card}">
          <CardHeader>
            <CardTitle className="${ikeaClasses.text}">üöÄ Your App is Ready!</CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <p className="text-gray-600">This is your generated Spark app${useIkea ? ' with IKEA\'s Swedish minimalist design' : ''}. Start building amazing things!</p>
            <Button className="${ikeaClasses.button}">Get Started</Button>
          </CardContent>
        </Card>

        ${useIkea ? `
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <Card className="${ikeaClasses.card}">
            <CardHeader>
              <CardTitle className="${ikeaClasses.text}">üá∏üá™ Swedish Design</CardTitle>
            </CardHeader>
            <CardContent>
              <p className="text-gray-600">Built with IKEA's minimalist design principles - clean, functional, and accessible.</p>
            </CardContent>
          </Card>

          <Card className="${ikeaClasses.card}">
            <CardHeader>
              <CardTitle className="${ikeaClasses.text}">üé® Brand Colors</CardTitle>
            </CardHeader>
            <CardContent className="space-y-3">
              <div className="flex items-center gap-3">
                <div className="w-6 h-6 rounded ${ikeaClasses.primary}"></div>
                <span className="text-sm text-gray-600">Swedish Blue (#0046be)</span>
              </div>
              <div className="flex items-center gap-3">
                <div className="w-6 h-6 rounded ${ikeaClasses.accent}"></div>
                <span className="text-sm text-gray-600">Swedish Yellow (#fdc935)</span>
              </div>
            </CardContent>
          </Card>
        </div>
        ` : ''}
      </div>
    </div>
  );
}

export default App;`
    };
  }

  /**
   * Apply IKEA design system (legacy custom implementation)
   * NOTE: This is deprecated in favor of official Ingka packages
   */
  async applyIkeaDesignSystem(appPath) {
    console.log(chalk.yellow('üá∏üá™ Applying custom IKEA design system...\n'));
    console.log(chalk.gray('üí° Tip: Use --style ingka for official Ingka components\n'));

    try {
      // 1. Generate and update Tailwind config
      const tailwindConfig = generateIkeaTailwindConfig();
      const tailwindPath = path.join(appPath, 'tailwind.config.js');
      await fs.writeFile(tailwindPath, tailwindConfig, 'utf8');
      console.log(chalk.green('‚úÖ'), 'Updated tailwind.config.js with IKEA colors');

      // 2. Generate IKEA CSS variables and components
      const ikeaCSS = generateIkeaComponentCSS();
      const cssPath = path.join(appPath, 'src', 'styles', 'ikea.css');
      await fs.ensureDir(path.dirname(cssPath));
      await fs.writeFile(cssPath, ikeaCSS, 'utf8');
      console.log(chalk.green('‚úÖ'), 'Created IKEA component styles');

      // 3. Update main CSS to import IKEA styles
      const mainCSSPath = path.join(appPath, 'src', 'index.css');
      if (await fs.pathExists(mainCSSPath)) {
        const currentCSS = await fs.readFile(mainCSSPath, 'utf8');
        const updatedCSS = `@import './styles/ikea.css';\n\n${currentCSS}`;
        await fs.writeFile(mainCSSPath, updatedCSS, 'utf8');
        console.log(chalk.green('‚úÖ'), 'Updated index.css to import IKEA styles');
      }

      // 4. Create IKEA design tokens file for reference
      const tokensPath = path.join(appPath, 'src', 'lib', 'ikea-tokens.ts');
      await fs.ensureDir(path.dirname(tokensPath));
      await fs.writeFile(tokensPath, `// IKEA Design System Tokens
// Generated by Ingvar Spark

export const IKEA_TOKENS = ${JSON.stringify(IKEA_DESIGN_TOKENS, null, 2)};

// Usage examples:
// className="bg-ikea-blue text-white"
// className="bg-ikea-yellow text-ikea-blue"
// className="bg-ikea-gray-50 border border-ikea-gray-200"
`, 'utf8');
      console.log(chalk.green('‚úÖ'), 'Created IKEA design tokens reference');

    } catch (error) {
      console.log(chalk.yellow('‚ö†Ô∏è  Warning: Could not apply all IKEA design system changes'));
      console.log(chalk.gray(`Error: ${error.message}`));
    }
  }

  /**
   * Apply official IKEA Ingka Skapa Design System
   * This installs official @ingka packages from the internal registry
   */
  async applyIngkaDesignSystem(appPath) {
    console.log(chalk.cyan.bold('üá∏üá™ Applying Official IKEA Ingka Skapa Design System\n'));

    try {
      // 1. Configure Ingka registry
      console.log(chalk.gray('üì¶ Configuring Ingka registry...'));
      const npmrcPath = path.join(appPath, '.npmrc');
      const npmrcContent = '@ingka:registry=https://npm.m2.blue.cdtapps.com\n';
      await fs.writeFile(npmrcPath, npmrcContent, 'utf8');
      console.log(chalk.green('‚úÖ'), 'Configured Ingka registry');

      // 2. Determine which packages to install based on app complexity
      const corePackages = [
        '@ingka/design-tokens',
        '@ingka/colours',
        '@ingka/typography',
        '@ingka/button',
        '@ingka/card',
        '@ingka/input-field',
        '@ingka/grid'
      ];

      const allPackages = [
        '@ingka/animations',
        '@ingka/browserslist-config',
        '@ingka/colours',
        '@ingka/design-tokens',
        '@ingka/grid',
        '@ingka/icon',
        '@ingka/logos',
        '@ingka/typography',
        '@ingka/accordion',
        '@ingka/avatar',
        '@ingka/card',
        '@ingka/compact-card',
        '@ingka/divider',
        '@ingka/image',
        '@ingka/list',
        '@ingka/member-card',
        '@ingka/rating',
        '@ingka/shoppable-image',
        '@ingka/simple-video',
        '@ingka/table',
        '@ingka/tabs',
        '@ingka/teaser',
        '@ingka/text',
        '@ingka/text-overlay-card',
        '@ingka/thumbnail-grid',
        '@ingka/commercial-messages',
        '@ingka/price',
        '@ingka/price-module',
        '@ingka/product-identifier',
        '@ingka/hyperlink',
        '@ingka/tag',
        '@ingka/button',
        '@ingka/dual-button',
        '@ingka/expanding-button',
        '@ingka/icon-pill',
        '@ingka/icon-button',
        '@ingka/jumbo-button',
        '@ingka/pill',
        '@ingka/checkbox',
        '@ingka/choice',
        '@ingka/combobox',
        '@ingka/input-field',
        '@ingka/quantity-stepper',
        '@ingka/radio-button',
        '@ingka/search',
        '@ingka/segmented-control',
        '@ingka/select',
        '@ingka/slider',
        '@ingka/switch',
        '@ingka/text-area',
        '@ingka/toggle',
        '@ingka/badge',
        '@ingka/loading',
        '@ingka/progress-indicator',
        '@ingka/skeleton',
        '@ingka/status',
        '@ingka/banner',
        '@ingka/helper-text',
        '@ingka/inline-message',
        '@ingka/toast',
        '@ingka/aspect-ratio-box',
        '@ingka/carousel',
        '@ingka/endorsement-label',
        '@ingka/expander',
        '@ingka/list-box',
        '@ingka/list-view',
        '@ingka/modal-prompt',
        '@ingka/modal-sheets',
        '@ingka/modal-theatre',
        '@ingka/payment-logo',
        '@ingka/skip-content',
        '@ingka/tooltip'
      ];

      // Use core packages for simple apps, all packages for complex apps
      const packagesToInstall = corePackages;

      console.log(chalk.gray(`üì¶ Installing ${packagesToInstall.length} Ingka packages...`));
      console.log(chalk.gray('   This may take a minute...\n'));

      // 3. Install Ingka packages
      try {
        execSync(`npm install ${packagesToInstall.join(' ')}`, {
          cwd: appPath,
          stdio: 'inherit'
        });
        console.log(chalk.green('\n‚úÖ'), 'Installed Ingka design system packages');
      } catch (installError) {
        console.log(chalk.yellow('‚ö†Ô∏è  Some Ingka packages could not be installed'));
        console.log(chalk.gray('   This might be due to registry authentication'));
        console.log(chalk.gray('   Continuing with available packages...\n'));
      }

      // 4. Create example component showcasing Ingka usage
      const exampleComponent = `import { Button } from '@ingka/button';
import { Card } from '@ingka/card';
import { InputField } from '@ingka/input-field';
import { Grid } from '@ingka/grid';
import { Text } from '@ingka/text';
import { colors } from '@ingka/colours';

/**
 * Example component using official IKEA Ingka components
 * Generated by Ingvar Kit
 */
export function IngkaExample() {
  return (
    <div style={{ padding: '2rem', backgroundColor: colors.neutral[50] }}>
      <Text variant="heading1">IKEA Ingka Design System</Text>
      <Text variant="body">Official components from Ingka Skapa</Text>

      <Grid cols={2} gap="md" style={{ marginTop: '2rem' }}>
        <Card>
          <Card.Content>
            <Text variant="heading3">Card Example</Text>
            <Text variant="body">
              This is an official Ingka card component
            </Text>
          </Card.Content>
        </Card>

        <Card>
          <Card.Content>
            <Text variant="heading3">Form Example</Text>
            <InputField
              label="Email"
              type="email"
              placeholder="Enter your email"
            />
            <Button variant="primary" style={{ marginTop: '1rem' }}>
              Submit
            </Button>
          </Card.Content>
        </Card>
      </Grid>
    </div>
  );
}
`;

      const examplePath = path.join(appPath, 'src', 'components', 'IngkaExample.tsx');
      await fs.ensureDir(path.dirname(examplePath));
      await fs.writeFile(examplePath, exampleComponent, 'utf8');
      console.log(chalk.green('‚úÖ'), 'Created Ingka example component');

      // 5. Create README for Ingka usage
      const ingkaReadme = `# IKEA Ingka Design System Usage

This app uses the official IKEA Ingka Skapa Design System.

## Installed Packages

${packagesToInstall.map(pkg => `- \`${pkg}\``).join('\n')}

## Quick Start

### Import Components

\`\`\`tsx
import { Button } from '@ingka/button';
import { Card } from '@ingka/card';
import { InputField } from '@ingka/input-field';
\`\`\`

### Use in Your App

\`\`\`tsx
function MyComponent() {
  return (
    <Card>
      <Card.Content>
        <InputField label="Name" />
        <Button variant="primary">Submit</Button>
      </Card.Content>
    </Card>
  );
}
\`\`\`

## Available Components

See \`src/components/IngkaExample.tsx\` for usage examples.

## Documentation

- Internal Ingka documentation: Available on IKEA intranet
- Registry: https://npm.m2.blue.cdtapps.com
- Ingvar Kit Guide: See \`docs/guides/INGKA_DESIGN_SYSTEM.md\`

## Support

For registry access issues, contact IKEA IT Support.
`;

      const readmePath = path.join(appPath, 'INGKA_README.md');
      await fs.writeFile(readmePath, ingkaReadme, 'utf8');
      console.log(chalk.green('‚úÖ'), 'Created Ingka usage guide');

      console.log(chalk.cyan('\nüéâ Official Ingka design system integrated!\n'));
      console.log(chalk.gray('   Import and use Ingka components in your app'));
      console.log(chalk.gray('   See INGKA_README.md for usage examples\n'));

    } catch (error) {
      console.log(chalk.red('‚ùå Error applying Ingka design system:'), error.message);
      console.log(chalk.yellow('‚ö†Ô∏è  Falling back to custom IKEA implementation'));
      // Fall back to custom IKEA design if Ingka fails
      await this.applyIkeaDesignSystem(appPath);
    }
  }
}

// Export standalone functions for CLI integration
async function generateSparkApp(config) {
  const generator = new SparkGenerator();
  return generator.generateApp(config);
}

module.exports = { SparkGenerator, generateSparkApp };
